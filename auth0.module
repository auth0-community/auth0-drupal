<?php
// Create a variable to store the path to this module
define('AUTH0_PATH', drupal_get_path('module', 'auth0'));

require_once (AUTH0_PATH . '/vendor/autoload.php');

use Auth0SDK\Auth0;

/**
 * Implements hook_theme_registry_alter(&$theme_registry)
 * We use this to override the login template with the one from block--user--login.tpl.php
 */
function auth0_theme_registry_alter(&$theme_registry) {
    global $theme_key;
    $theme_registry_copy = $theme_registry;
    _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', $theme_key, AUTH0_PATH);
    $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}


/**
 * Implements hook_menu
 */
function auth0_menu() {
    $items = array();
    // Add the callback controller
    $items['auth0/callback'] = array(
        'description' => 'Callback handler from auth0',
        'page callback' => 'auth0_callback',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );

    $items['auth0/verify_email'] = array(
        'description' => 'Verify email action',
        'page callback' => 'verify_email_page',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );


    // Add an admin configuration page
    $items['admin/config/people/auth0'] = array(
        'title' => 'Auth0 Login Settings',
        'description' => 'Configure your auth0 account and widget.',
        'page callback'    => 'drupal_get_form',
        'page arguments' => array('auth0_login_form'),
        'access arguments' => array('administer site configuration')
    );
    // Basic tab
    $items['admin/config/people/auth0/basic'] = array(
        'title' => 'Basic',
        'description' => 'Configure your auth0 account and widget.',
        'page callback'    => 'drupal_get_form',
        'page arguments' => array('auth0_login_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_DEFAULT_LOCAL_TASK,

    );
    // Advanced tab
    $items['admin/config/people/auth0/advanced'] = array(
        'title' => 'Advanced',
        'description' => 'Configure your auth0 account and widget.',
        'page callback'    => 'drupal_get_form',
        'page arguments' => array('auth0_advanced_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_LOCAL_TASK,

    );

    return $items;
}

function auth0_verify_email_page() {
    $token = $_REQUEST['token'];
    $secret = variable_get('auth0_client_secret');

    try {
        $user = \JWT::decode($token, base64_decode(strtr($secret, '-_', '+/')) );
        $userId = $user->sub;
        $domain = variable_get('auth0_domain');
        $url = "https://$domain/api/users/$userId/send_verification_email";
        $headers = array('Authorization' => "Bearer $token");
        $result = drupal_http_request($url, array('headers'=>$headers, 'method'=>'POST'));
        if ($result->code == 200) {
            drupal_set_message(t('An Authorization email was sent to your account'));
        } else {
            drupal_set_message(t('Sorry, we couldnt send the email'),'error');
        }
    } catch(Exception $e) {
       drupal_set_message(t('Sorry, we couldnt send the email'),'error');
    }

    return drupal_goto();
}
function auth0_callback() {
    global $base_root;

    $auth0 = new Auth0(array(
        'domain'        => variable_get('auth0_domain'),
        'client_id'     => variable_get('auth0_client_id'),
        'client_secret' => variable_get('auth0_client_secret'),
        'redirect_uri'  => "$base_root/auth0/callback",
        'store'         => false
    ));


    $userInfo = null;

    try {
        $userInfo = $auth0->getUserInfo();
        $idToken = $auth0->getIdToken();
    } catch(Exception $e) {

    }

    // var_dump($auth0); die;

    if ($userInfo) {
        auth0_login_auth0_user($userInfo, $idToken);
    } else {
        drupal_set_message(t('There was a problem logging you in, sorry by the inconvenience.'),'error');
    }

    return drupal_goto();
}
function auth0_fail_with_verify_email($idToken) {
    drupal_set_message(t("Please verify your email and log in again. Click <a href=@url>here</a> to Resend verification email.", array('@url' => url('auth0/verify_email', array('query' => array('token' => $idToken))))), 'warning');
    
    return drupal_goto();
}
function auth0_login_auth0_user($userInfo,$idToken) {
    $requires_email = variable_get('auth0_requires_verified_email');
    
    if ($requires_email) {
        if (!isset($userInfo['email']) || empty($userInfo['email'])) {
            return drupal_set_message(
                t('This account does not have an email associated. Please login with a different provider.'),
                'error'
            );
        }
        if (!$userInfo['email_verified']) {
            auth0_fail_with_verify_email($idToken);
        }
    }


    // See if there is a user in the auth0_user table with the user info client id
    $uid = auth0_find_auth0_user($userInfo['user_id']);
    
    if ($uid) {
        // User exists!
        // update the auth0_user with the new userInfo object
        auth0_update_auth0_object($userInfo);
        // Log in
        $form_state['uid'] = $uid;
        user_login_submit(array(), $form_state);
    } else {
        // If the user doesn't exist we need to either create a new one, or assign him to an existing one
       // If the user doesn't exist we need to either create a new one, or assign him to an existing one
        $isDatabaseUser = false;
        foreach ($userInfo['identities'] as $identity) {
            if ($identity['provider'] == "auth0") {
                $isDatabaseUser = true;
            }
        }
        $joinUser = false;
        // If the user has a verified email or is a database user try to see if there is
        // a user to join with. The isDatabase is because we don't want to allow database
        // user creation if there is an existing one with no verified email
        if ($userInfo['email_verified'] || $isDatabaseUser) {
            $joinUser = user_load_by_mail($userInfo['email']);
        }

        if ($joinUser) {
            // If we are here, we have a potential join user
            // Don't allow creation or assignation of user if the email is not verified, that would
            // be hijacking
            if (!$userInfo['email_verified']) {
                return auth0_fail_with_verify_email($idToken);
            }
            $uid = $joinUser->uid;
        } else {
            // If we are here, we need to create the user
            $uid = auth0_create_user_from_auth0($userInfo);
        }

        auth0_insert_auth0_user($userInfo, $uid);

        // Log in
        $form_state['uid'] = $uid;
        user_login_submit(array(), $form_state);

    }
}

/**
 * Implements hook_user_delete
 * removes the user from the auth0_user table
 */
function auth0_user_delete($account) {
    db_delete('auth0_user')
        ->condition('drupal_id', $account->uid, '=')
        ->execute();
}

/**
 * Function returns uid of passed google id
 */
function auth0_find_auth0_user($id) {
    $rs = db_select('auth0_user', 'a')
        ->fields('a', array('drupal_id'))
        ->condition('auth0_id', $id, '=')
        ->execute()
        ->fetchAssoc();
    return empty($rs) ? false : $rs['drupal_id'];
}

function auth0_update_auth0_object($userInfo) {
    db_update('auth0_user')
        ->fields(array(
            'auth0_object' => serialize($userInfo)
        ))
        ->condition('auth0_id', $userInfo['user_id'], '=')
        ->execute();
}

function auth0_insert_auth0_user ($userInfo, $uid) {
    $auth0_user = array(
        'auth0_id' => $userInfo['user_id'],
        'drupal_id' => $uid,
        'auth0_object' => serialize($userInfo)
    );

    drupal_write_record('auth0_user', $auth0_user);
}

function auth0_create_user_from_auth0 ($userInfo) {
    $user = new stdClass();
    if (isset($userInfo['email']) && !empty($userInfo['email'])) {
        $email = $userInfo['email'];

    } else {
        $email = "change_this_email@" . uniqid() .".com";
    }
    $user->mail = $email;
    $user->init = $email;

    // If the username already exists, create a new random one
    $username = $userInfo['nickname'];
    if (user_load_by_name($username)) {
        $username .= time();
    }
    $user->name = $username;
    $user->is_new = TRUE;
    $user->status = 1;
    $user->pass = user_password();
    $new_user = user_save($user);

    return $new_user->uid;
}

/**
 * Implements hook_menu_alter
 * We use this to override the content of /user, which is the page for login and user management
 * @param  [type] $items [description]
 * @return [type]        [description]
 */
function auth0_menu_alter(&$items) {
    // Change /user page callback to our own
    $items['user']['page callback'] = 'auth0_user_page';
    // No need for register or retrieve password
    unset($items['user/register']);
    unset($items['user/password']);
}

/**
 * This is the NEW page callback for /user/login, I've copied from user.pages.inc user_page function.
 * If the user is logged in, it goes to the normal user management, if not, it renders the auth0 login template
 */
function auth0_user_page() {
    global $user;
    if ($user->uid) {
        menu_set_active_item('user/' . $user->uid);
        return menu_execute_active_handler(NULL, FALSE);
    }
    else {
        return theme('auth0_login');
    }
}

/**
 * Implements hook_theme
 * Define the template to use for the /user action
 */
function auth0_theme() {
    return array(
        'auth0_login' => array(
            'template' => 'block--user--login',
        ),
    );
}

/**
* Form builder; Create and display the Auth0 configuration
* settings form.
*/
function auth0_login_form($form, &$form_state) {
    // Text field for the e-mail subject.
    $form['auth0_client_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Client id'),
        '#default_value' => variable_get('auth0_client_id', ''),
        '#description' => t('Application id, copy from the auth0 dashboard.'),
        '#required' => TRUE,
    );
    $form['auth0_client_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Client secret'),
        '#default_value' => variable_get('auth0_client_secret', ''),
        '#description' => t('Application secret, copy from the auth0 dashboard.'),
        '#required' => TRUE,
    );
    $form['auth0_domain'] = array(
        '#type' => 'textfield',
        '#title' => t('Domain'),
        '#default_value' => variable_get('auth0_domain', ''),
        '#description' => t('Your Auth0 domain, you can see it in the auth0 dashboard.'),
        '#required' => TRUE,
    );


    return system_settings_form($form);
}

/**
* Form builder; Create and display the Auth0 configuration
* settings form.
*/
function auth0_advanced_form($form, &$form_state) {
    // Text field for the e-mail subject.
    $form['auth0_form_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Form title'),
        '#default_value' => variable_get('auth0_form_title', 'Sign In'),
        '#description' => t('This is the title for the login widget.')
    );

    $form['auth0_allow_signup'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow user signup'),
        '#default_value' => variable_get('auth0_allow_signup'),
        '#description' => t('If you have database connection you can allow users to signup in the widget.')
    );

    $form['auth0_widget_cdn'] = array(
        '#type' => 'textfield',
        '#title' => t('Widget CDN'),
        '#default_value' => variable_get('auth0_widget_cdn'),
        '#description' => t('Point this to the latest widget available in the CDN.')
    );

    $form['auth0_requires_verified_email'] = array(
        '#type' => 'checkbox',
        '#title' => t('Requires verified email'),
        '#default_value' => variable_get('auth0_requires_verified_email'),
        '#description' => t('Mark this if you require the user to have a verified email to login.')
    );

    $form['auth0_login_css'] = array(
        '#type' => 'textarea',
        '#title' => t('Login widget css'),
        '#default_value' => variable_get('auth0_login_css'),
        '#description' => t('This css controls how the widget look and feel.')
    );

    return system_settings_form($form);
}